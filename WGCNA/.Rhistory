femData <- read.csv("../../LiverFemale3600.csv")
dataExpr0 <- as.data.frame(t(femData[,-c(1:8)]))
View(dataExpr0)
names(dataExpr0) <- femData$substanceBXH
colnames(dataExpr0)
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",sep="\t",stringsAsFactors = F)
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
rownames(dataExpr0) <- colnames(hpt)
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
dataExpr0 <- as.data.frame(t(hpt))
names(dataExpr0) <- hpt$Protein
rownames(dataExpr0) <- names(hpt)
gsg = goodSamplesGenes(datExpr0, verbose = 3)
library(WGCNA)
install.packages("WGCNA")
library(WGCNA)
gsg = goodSamplesGenes(datExpr0, verbose = 3)
source('~/Ctherm_PUFs_Revisions/WGCNA/preprocess.R')
View(datExpr0)
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
datExpr0 <- as.data.frame(t(hpt[,-1]))
names(datExpr0) <- hpt$Protein
rownames(datExpr0) <- names(hpt[,-1])
gsg = goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
datExpr0 <- as.data.frame(t(hpt[,-1]))
names(datExpr0) <- hpt$Protein
rownames(datExpr0) <- names(hpt[,-1])
hpt[which(hpt == 0)] <- NA
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
datExpr0 <- as.data.frame(t(hpt[,-1]))
names(datExpr0) <- hpt$Protein
rownames(datExpr0) <- names(hpt[,-1])
hpt[,which(hpt == 0)] <- NA
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
datExpr0 <- as.data.frame(t(hpt[,-1]))
names(datExpr0) <- hpt$Protein
rownames(datExpr0) <- names(hpt[,-1])
hpt[which(hpt == 0),] <- NA
View(hpt)
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
datExpr0 <- as.data.frame(t(hpt[,-1]))
names(datExpr0) <- hpt$Protein
rownames(datExpr0) <- names(hpt[,-1])
gsg = goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
sampleTree <- hclust(dist(hpt.imp), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
hpt.imp <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_Imputed_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
gsg <- goodSamplesGenes(hpt, verbose = 3)
gsg$allOK
if (!gsg$allOK)
{
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data
hpt.imp <- hpt.imp[gsg$goodGenes,gsg$goodSamples]
}
sampleTree <- hclust(dist(hpt.imp), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
sampleTree <- hclust(dist(t(hpt.imp)), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
View(hpt.imp)
reformatMatrix <- function(df)
{
datExpr0 <- as.data.frame(t(df[,-1]))
names(datExpr0) <- df$Protein
rownames(datExpr0) <- names(df[,-1])
return(datExpr0)
}
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
hpt.imp <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_Imputed_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
gsg <- goodSamplesGenes(hpt, verbose = 3)
gsg$allOK
if (!gsg$allOK)
{
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data
hpt.imp <- hpt.imp[gsg$goodGenes,gsg$goodSamples]
}
sampleTree <- hclust(dist(t(hpt.imp)), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
hpt.imp <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_Imputed_remove_crap.tsv",header=T,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
gsg <- goodSamplesGenes(hpt, verbose = 3)
gsg$allOK
gsg <- goodSamplesGenes(hpt, verbose = 3)
gsg$allOK
if (!gsg$allOK)
{
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data
hpt.imp <- hpt.imp[gsg$goodSamples,gsg$goodGenes]
}
sampleTree <- hclust(dist(t(hpt.imp)), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
sampleTree <- hclust(dist(hpt.imp), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
gsg <- goodSamplesGenes(hpt, verbose = 3)
gsg$allOK
if (!gsg$allOK)
{
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data
hpt <- hpt[gsg$goodSamples,gsg$goodGenes]
}
sampleTree <- hclust(dist(hpt.imp), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
sampleTree <- hclust(dist(hpt), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
source('~/Ctherm_PUFs_Revisions/WGCNA/preprocess.R')
library(WGCNA)
library(Biobase)
library(preprocessCore)
## Based on WGCNA tutorials
reformatMatrix <- function(df)
{
datExpr0 <- as.data.frame(t(df[,-1]))
names(datExpr0) <- df$Protein
rownames(datExpr0) <- names(df[,-1])
return(datExpr0)
}
## Quantile normalization
normalization <- function(df)
{
df.norm <- as.data.frame(normalize.quantiles(as.matrix(df)))
rownames(df.norm) <- rownames(df)
colnames(df.norm) <- colnames(df)
return(df)
}
reformatMatrix <- function(df)
{
datExpr0 <- as.data.frame(t(df))
colnames(datExpr0) <- rownames(df)
rownames(datExpr0) <- colnames(df)
return(datExpr0)
}
## Quantile normalization
normalization <- function(df)
{
df.norm <- as.data.frame(normalize.quantiles(as.matrix(df)))
rownames(df.norm) <- rownames(df)
colnames(df.norm) <- colnames(df)
return(df)
}
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt.imp <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_Imputed_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
hpt <- normalization(hpt)
hpt.imp <- normalization(hpt.imp)
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
library(WGCNA)
library(Biobase)
library(preprocessCore)
reformatMatrix <- function(df)
{
datExpr0 <- as.data.frame(t(df))
colnames(datExpr0) <- rownames(df)
rownames(datExpr0) <- colnames(df)
return(datExpr0)
}
## Quantile normalization
normalization <- function(df)
{
df.norm <- as.data.frame(normalize.quantiles(as.matrix(df)))
rownames(df.norm) <- rownames(df)
colnames(df.norm) <- colnames(df)
return(df)
}
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt.imp <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_Imputed_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
hpt <- normalization(hpt)
hpt.imp <- normalization(hpt.imp)
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
gsg <- goodSamplesGenes(hpt, verbose = 3)
hpt <- normalization(hpt)
reformatMatrix <- function(df)
{
datExpr0 <- as.data.frame(t(df))
colnames(datExpr0) <- rownames(df)
rownames(datExpr0) <- colnames(df)
return(datExpr0)
}
## Quantile normalization
normalization <- function(df)
{
df.norm <- as.data.frame(normalize.quantiles(as.matrix(df)))
rownames(df.norm) <- rownames(df)
colnames(df.norm) <- colnames(df)
return(df.norm)
}
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt.imp <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_Imputed_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
hpt <- normalization(hpt)
hpt.imp <- normalization(hpt.imp)
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
gsg <- goodSamplesGenes(hpt, verbose = 3)
gsg$allOK
## Quantile normalization
normalization <- function(df)
{
df.norm <- as.data.frame(normalize.quantiles(as.matrix(df)))
rownames(df.norm) <- rownames(df)
colnames(df.norm) <- colnames(df)
print("yep")
return(df.norm)
}
hpt <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt.imp <- read.table("../Data/Expression/PUF_time_course_hpt_min_2_prot_log2_Imputed_remove_crap.tsv",header=T,row.names=1,sep="\t",stringsAsFactors = F)
hpt[hpt == 0] <- NA
hpt <- normalization(hpt)
hpt.imp <- normalization(hpt.imp)
hpt <- reformatMatrix(hpt)
hpt.imp <- reformatMatrix(hpt.imp)
source('~/Ctherm_PUFs_Revisions/WGCNA/preprocess.R')
source('~/Ctherm_PUFs_Revisions/WGCNA/networkConstruction.R')
source('~/Ctherm_PUFs_Revisions/WGCNA/networkConstruction.R')
source('~/Ctherm_PUFs_Revisions/WGCNA/networkConstruction.R')
table(net$colors)
net <- blockwiseModules(hpt, power = 6,
TOMType = "unsigned", minModuleSize = 15,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "Network_construction/hptTOM",
verbose = 3)
table(net$colors)
pdf("Plots/dendogram.pdf")
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
dev.off()
dev.off()
pdf("Plots/dendogram.pdf")
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
dev.off()
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
library(topGO)
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
str(head(geneID2GO))
